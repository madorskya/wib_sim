-- Copyright(c) 2022 UNITED KINGDOM RESEARCH AND INNOVATION
-- Electronic System Design Group, Technology Department,
-- Science and Technology Facilities Council
-- Licensed under the BSD 3-Clause license. See LICENSE file in the project root for details.
--------------------------------------------------------------------------------
-- Autogenerated by crc_table_gen.py with the following Parameters:
-- POLYNOMIAL: X"EDB88320"
-- NOF_LUTS:   1
-- LUT_SIZE:   256
--------------------------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity crc32_8_bytewise_lut_python is
    generic(
        G_NOF_LUTS : integer := 1
    );
    port(
        data_in : in  std_logic_vector(G_NOF_LUTS * 8 - 1 downto 0);
        crc_out : out std_logic_vector(31 downto 0)
    );
end entity crc32_8_bytewise_lut_python;

architecture behavioral of crc32_8_bytewise_lut_python is

    type t_byte_lut_arr is array (255 downto 0) of std_logic_vector(31 downto 0);
    type t_crc_lut_arr is array (G_NOF_LUTS - 1 downto 0) of t_byte_lut_arr;

    signal crc32_lut_arr : t_crc_lut_arr;

    type t_crc_out_arr is array (G_NOF_LUTS - 1 downto 0) of std_logic_vector(31 downto 0);
    signal crc_out_arr : t_crc_out_arr;

begin

    -- Process to select data from each CRC Byte LUT according to incoming data
    lut_process : process(data_in, crc32_lut_arr)
    begin
        for i in 0 to G_NOF_LUTS - 1 loop
            crc_out_arr(i) <= crc32_lut_arr(i)(to_integer((unsigned(data_in(((i + 1) * 8 - 1) downto (i * 8))))));
        end loop;
    end process lut_process;

    -- XOR all LUT outputs to give current CRC
    -- crc_out <= (crc_out_array(0) xor crc_out_array(1) xor crc_out_array(2) xor
    --            crc_out_array(3) xor crc_out_array(4) xor crc_out_array(5) xor
    --            crc_out_array(6) xor crc_out_array(7));
    xor_process : process(crc_out_arr)
        variable temp : std_logic_vector(31 downto 0) := (others => '0');
    begin
        temp    := crc_out_arr(0);
        for j in 1 to G_NOF_LUTS - 1 loop
            temp := temp xor crc_out_arr(j);
        end loop;
        crc_out <= temp;
    end process xor_process;

    --------------------------------------------------------------------------------
    -- Start of LUT Array:
    --------------------------------------------------------------------------------
    crc32_lut_arr(0)(0)   <= X"00000000";
    crc32_lut_arr(0)(1)   <= X"77073096";
    crc32_lut_arr(0)(2)   <= X"EE0E612C";
    crc32_lut_arr(0)(3)   <= X"990951BA";
    crc32_lut_arr(0)(4)   <= X"076DC419";
    crc32_lut_arr(0)(5)   <= X"706AF48F";
    crc32_lut_arr(0)(6)   <= X"E963A535";
    crc32_lut_arr(0)(7)   <= X"9E6495A3";
    crc32_lut_arr(0)(8)   <= X"0EDB8832";
    crc32_lut_arr(0)(9)   <= X"79DCB8A4";
    crc32_lut_arr(0)(10)  <= X"E0D5E91E";
    crc32_lut_arr(0)(11)  <= X"97D2D988";
    crc32_lut_arr(0)(12)  <= X"09B64C2B";
    crc32_lut_arr(0)(13)  <= X"7EB17CBD";
    crc32_lut_arr(0)(14)  <= X"E7B82D07";
    crc32_lut_arr(0)(15)  <= X"90BF1D91";
    crc32_lut_arr(0)(16)  <= X"1DB71064";
    crc32_lut_arr(0)(17)  <= X"6AB020F2";
    crc32_lut_arr(0)(18)  <= X"F3B97148";
    crc32_lut_arr(0)(19)  <= X"84BE41DE";
    crc32_lut_arr(0)(20)  <= X"1ADAD47D";
    crc32_lut_arr(0)(21)  <= X"6DDDE4EB";
    crc32_lut_arr(0)(22)  <= X"F4D4B551";
    crc32_lut_arr(0)(23)  <= X"83D385C7";
    crc32_lut_arr(0)(24)  <= X"136C9856";
    crc32_lut_arr(0)(25)  <= X"646BA8C0";
    crc32_lut_arr(0)(26)  <= X"FD62F97A";
    crc32_lut_arr(0)(27)  <= X"8A65C9EC";
    crc32_lut_arr(0)(28)  <= X"14015C4F";
    crc32_lut_arr(0)(29)  <= X"63066CD9";
    crc32_lut_arr(0)(30)  <= X"FA0F3D63";
    crc32_lut_arr(0)(31)  <= X"8D080DF5";
    crc32_lut_arr(0)(32)  <= X"3B6E20C8";
    crc32_lut_arr(0)(33)  <= X"4C69105E";
    crc32_lut_arr(0)(34)  <= X"D56041E4";
    crc32_lut_arr(0)(35)  <= X"A2677172";
    crc32_lut_arr(0)(36)  <= X"3C03E4D1";
    crc32_lut_arr(0)(37)  <= X"4B04D447";
    crc32_lut_arr(0)(38)  <= X"D20D85FD";
    crc32_lut_arr(0)(39)  <= X"A50AB56B";
    crc32_lut_arr(0)(40)  <= X"35B5A8FA";
    crc32_lut_arr(0)(41)  <= X"42B2986C";
    crc32_lut_arr(0)(42)  <= X"DBBBC9D6";
    crc32_lut_arr(0)(43)  <= X"ACBCF940";
    crc32_lut_arr(0)(44)  <= X"32D86CE3";
    crc32_lut_arr(0)(45)  <= X"45DF5C75";
    crc32_lut_arr(0)(46)  <= X"DCD60DCF";
    crc32_lut_arr(0)(47)  <= X"ABD13D59";
    crc32_lut_arr(0)(48)  <= X"26D930AC";
    crc32_lut_arr(0)(49)  <= X"51DE003A";
    crc32_lut_arr(0)(50)  <= X"C8D75180";
    crc32_lut_arr(0)(51)  <= X"BFD06116";
    crc32_lut_arr(0)(52)  <= X"21B4F4B5";
    crc32_lut_arr(0)(53)  <= X"56B3C423";
    crc32_lut_arr(0)(54)  <= X"CFBA9599";
    crc32_lut_arr(0)(55)  <= X"B8BDA50F";
    crc32_lut_arr(0)(56)  <= X"2802B89E";
    crc32_lut_arr(0)(57)  <= X"5F058808";
    crc32_lut_arr(0)(58)  <= X"C60CD9B2";
    crc32_lut_arr(0)(59)  <= X"B10BE924";
    crc32_lut_arr(0)(60)  <= X"2F6F7C87";
    crc32_lut_arr(0)(61)  <= X"58684C11";
    crc32_lut_arr(0)(62)  <= X"C1611DAB";
    crc32_lut_arr(0)(63)  <= X"B6662D3D";
    crc32_lut_arr(0)(64)  <= X"76DC4190";
    crc32_lut_arr(0)(65)  <= X"01DB7106";
    crc32_lut_arr(0)(66)  <= X"98D220BC";
    crc32_lut_arr(0)(67)  <= X"EFD5102A";
    crc32_lut_arr(0)(68)  <= X"71B18589";
    crc32_lut_arr(0)(69)  <= X"06B6B51F";
    crc32_lut_arr(0)(70)  <= X"9FBFE4A5";
    crc32_lut_arr(0)(71)  <= X"E8B8D433";
    crc32_lut_arr(0)(72)  <= X"7807C9A2";
    crc32_lut_arr(0)(73)  <= X"0F00F934";
    crc32_lut_arr(0)(74)  <= X"9609A88E";
    crc32_lut_arr(0)(75)  <= X"E10E9818";
    crc32_lut_arr(0)(76)  <= X"7F6A0DBB";
    crc32_lut_arr(0)(77)  <= X"086D3D2D";
    crc32_lut_arr(0)(78)  <= X"91646C97";
    crc32_lut_arr(0)(79)  <= X"E6635C01";
    crc32_lut_arr(0)(80)  <= X"6B6B51F4";
    crc32_lut_arr(0)(81)  <= X"1C6C6162";
    crc32_lut_arr(0)(82)  <= X"856530D8";
    crc32_lut_arr(0)(83)  <= X"F262004E";
    crc32_lut_arr(0)(84)  <= X"6C0695ED";
    crc32_lut_arr(0)(85)  <= X"1B01A57B";
    crc32_lut_arr(0)(86)  <= X"8208F4C1";
    crc32_lut_arr(0)(87)  <= X"F50FC457";
    crc32_lut_arr(0)(88)  <= X"65B0D9C6";
    crc32_lut_arr(0)(89)  <= X"12B7E950";
    crc32_lut_arr(0)(90)  <= X"8BBEB8EA";
    crc32_lut_arr(0)(91)  <= X"FCB9887C";
    crc32_lut_arr(0)(92)  <= X"62DD1DDF";
    crc32_lut_arr(0)(93)  <= X"15DA2D49";
    crc32_lut_arr(0)(94)  <= X"8CD37CF3";
    crc32_lut_arr(0)(95)  <= X"FBD44C65";
    crc32_lut_arr(0)(96)  <= X"4DB26158";
    crc32_lut_arr(0)(97)  <= X"3AB551CE";
    crc32_lut_arr(0)(98)  <= X"A3BC0074";
    crc32_lut_arr(0)(99)  <= X"D4BB30E2";
    crc32_lut_arr(0)(100) <= X"4ADFA541";
    crc32_lut_arr(0)(101) <= X"3DD895D7";
    crc32_lut_arr(0)(102) <= X"A4D1C46D";
    crc32_lut_arr(0)(103) <= X"D3D6F4FB";
    crc32_lut_arr(0)(104) <= X"4369E96A";
    crc32_lut_arr(0)(105) <= X"346ED9FC";
    crc32_lut_arr(0)(106) <= X"AD678846";
    crc32_lut_arr(0)(107) <= X"DA60B8D0";
    crc32_lut_arr(0)(108) <= X"44042D73";
    crc32_lut_arr(0)(109) <= X"33031DE5";
    crc32_lut_arr(0)(110) <= X"AA0A4C5F";
    crc32_lut_arr(0)(111) <= X"DD0D7CC9";
    crc32_lut_arr(0)(112) <= X"5005713C";
    crc32_lut_arr(0)(113) <= X"270241AA";
    crc32_lut_arr(0)(114) <= X"BE0B1010";
    crc32_lut_arr(0)(115) <= X"C90C2086";
    crc32_lut_arr(0)(116) <= X"5768B525";
    crc32_lut_arr(0)(117) <= X"206F85B3";
    crc32_lut_arr(0)(118) <= X"B966D409";
    crc32_lut_arr(0)(119) <= X"CE61E49F";
    crc32_lut_arr(0)(120) <= X"5EDEF90E";
    crc32_lut_arr(0)(121) <= X"29D9C998";
    crc32_lut_arr(0)(122) <= X"B0D09822";
    crc32_lut_arr(0)(123) <= X"C7D7A8B4";
    crc32_lut_arr(0)(124) <= X"59B33D17";
    crc32_lut_arr(0)(125) <= X"2EB40D81";
    crc32_lut_arr(0)(126) <= X"B7BD5C3B";
    crc32_lut_arr(0)(127) <= X"C0BA6CAD";
    crc32_lut_arr(0)(128) <= X"EDB88320";
    crc32_lut_arr(0)(129) <= X"9ABFB3B6";
    crc32_lut_arr(0)(130) <= X"03B6E20C";
    crc32_lut_arr(0)(131) <= X"74B1D29A";
    crc32_lut_arr(0)(132) <= X"EAD54739";
    crc32_lut_arr(0)(133) <= X"9DD277AF";
    crc32_lut_arr(0)(134) <= X"04DB2615";
    crc32_lut_arr(0)(135) <= X"73DC1683";
    crc32_lut_arr(0)(136) <= X"E3630B12";
    crc32_lut_arr(0)(137) <= X"94643B84";
    crc32_lut_arr(0)(138) <= X"0D6D6A3E";
    crc32_lut_arr(0)(139) <= X"7A6A5AA8";
    crc32_lut_arr(0)(140) <= X"E40ECF0B";
    crc32_lut_arr(0)(141) <= X"9309FF9D";
    crc32_lut_arr(0)(142) <= X"0A00AE27";
    crc32_lut_arr(0)(143) <= X"7D079EB1";
    crc32_lut_arr(0)(144) <= X"F00F9344";
    crc32_lut_arr(0)(145) <= X"8708A3D2";
    crc32_lut_arr(0)(146) <= X"1E01F268";
    crc32_lut_arr(0)(147) <= X"6906C2FE";
    crc32_lut_arr(0)(148) <= X"F762575D";
    crc32_lut_arr(0)(149) <= X"806567CB";
    crc32_lut_arr(0)(150) <= X"196C3671";
    crc32_lut_arr(0)(151) <= X"6E6B06E7";
    crc32_lut_arr(0)(152) <= X"FED41B76";
    crc32_lut_arr(0)(153) <= X"89D32BE0";
    crc32_lut_arr(0)(154) <= X"10DA7A5A";
    crc32_lut_arr(0)(155) <= X"67DD4ACC";
    crc32_lut_arr(0)(156) <= X"F9B9DF6F";
    crc32_lut_arr(0)(157) <= X"8EBEEFF9";
    crc32_lut_arr(0)(158) <= X"17B7BE43";
    crc32_lut_arr(0)(159) <= X"60B08ED5";
    crc32_lut_arr(0)(160) <= X"D6D6A3E8";
    crc32_lut_arr(0)(161) <= X"A1D1937E";
    crc32_lut_arr(0)(162) <= X"38D8C2C4";
    crc32_lut_arr(0)(163) <= X"4FDFF252";
    crc32_lut_arr(0)(164) <= X"D1BB67F1";
    crc32_lut_arr(0)(165) <= X"A6BC5767";
    crc32_lut_arr(0)(166) <= X"3FB506DD";
    crc32_lut_arr(0)(167) <= X"48B2364B";
    crc32_lut_arr(0)(168) <= X"D80D2BDA";
    crc32_lut_arr(0)(169) <= X"AF0A1B4C";
    crc32_lut_arr(0)(170) <= X"36034AF6";
    crc32_lut_arr(0)(171) <= X"41047A60";
    crc32_lut_arr(0)(172) <= X"DF60EFC3";
    crc32_lut_arr(0)(173) <= X"A867DF55";
    crc32_lut_arr(0)(174) <= X"316E8EEF";
    crc32_lut_arr(0)(175) <= X"4669BE79";
    crc32_lut_arr(0)(176) <= X"CB61B38C";
    crc32_lut_arr(0)(177) <= X"BC66831A";
    crc32_lut_arr(0)(178) <= X"256FD2A0";
    crc32_lut_arr(0)(179) <= X"5268E236";
    crc32_lut_arr(0)(180) <= X"CC0C7795";
    crc32_lut_arr(0)(181) <= X"BB0B4703";
    crc32_lut_arr(0)(182) <= X"220216B9";
    crc32_lut_arr(0)(183) <= X"5505262F";
    crc32_lut_arr(0)(184) <= X"C5BA3BBE";
    crc32_lut_arr(0)(185) <= X"B2BD0B28";
    crc32_lut_arr(0)(186) <= X"2BB45A92";
    crc32_lut_arr(0)(187) <= X"5CB36A04";
    crc32_lut_arr(0)(188) <= X"C2D7FFA7";
    crc32_lut_arr(0)(189) <= X"B5D0CF31";
    crc32_lut_arr(0)(190) <= X"2CD99E8B";
    crc32_lut_arr(0)(191) <= X"5BDEAE1D";
    crc32_lut_arr(0)(192) <= X"9B64C2B0";
    crc32_lut_arr(0)(193) <= X"EC63F226";
    crc32_lut_arr(0)(194) <= X"756AA39C";
    crc32_lut_arr(0)(195) <= X"026D930A";
    crc32_lut_arr(0)(196) <= X"9C0906A9";
    crc32_lut_arr(0)(197) <= X"EB0E363F";
    crc32_lut_arr(0)(198) <= X"72076785";
    crc32_lut_arr(0)(199) <= X"05005713";
    crc32_lut_arr(0)(200) <= X"95BF4A82";
    crc32_lut_arr(0)(201) <= X"E2B87A14";
    crc32_lut_arr(0)(202) <= X"7BB12BAE";
    crc32_lut_arr(0)(203) <= X"0CB61B38";
    crc32_lut_arr(0)(204) <= X"92D28E9B";
    crc32_lut_arr(0)(205) <= X"E5D5BE0D";
    crc32_lut_arr(0)(206) <= X"7CDCEFB7";
    crc32_lut_arr(0)(207) <= X"0BDBDF21";
    crc32_lut_arr(0)(208) <= X"86D3D2D4";
    crc32_lut_arr(0)(209) <= X"F1D4E242";
    crc32_lut_arr(0)(210) <= X"68DDB3F8";
    crc32_lut_arr(0)(211) <= X"1FDA836E";
    crc32_lut_arr(0)(212) <= X"81BE16CD";
    crc32_lut_arr(0)(213) <= X"F6B9265B";
    crc32_lut_arr(0)(214) <= X"6FB077E1";
    crc32_lut_arr(0)(215) <= X"18B74777";
    crc32_lut_arr(0)(216) <= X"88085AE6";
    crc32_lut_arr(0)(217) <= X"FF0F6A70";
    crc32_lut_arr(0)(218) <= X"66063BCA";
    crc32_lut_arr(0)(219) <= X"11010B5C";
    crc32_lut_arr(0)(220) <= X"8F659EFF";
    crc32_lut_arr(0)(221) <= X"F862AE69";
    crc32_lut_arr(0)(222) <= X"616BFFD3";
    crc32_lut_arr(0)(223) <= X"166CCF45";
    crc32_lut_arr(0)(224) <= X"A00AE278";
    crc32_lut_arr(0)(225) <= X"D70DD2EE";
    crc32_lut_arr(0)(226) <= X"4E048354";
    crc32_lut_arr(0)(227) <= X"3903B3C2";
    crc32_lut_arr(0)(228) <= X"A7672661";
    crc32_lut_arr(0)(229) <= X"D06016F7";
    crc32_lut_arr(0)(230) <= X"4969474D";
    crc32_lut_arr(0)(231) <= X"3E6E77DB";
    crc32_lut_arr(0)(232) <= X"AED16A4A";
    crc32_lut_arr(0)(233) <= X"D9D65ADC";
    crc32_lut_arr(0)(234) <= X"40DF0B66";
    crc32_lut_arr(0)(235) <= X"37D83BF0";
    crc32_lut_arr(0)(236) <= X"A9BCAE53";
    crc32_lut_arr(0)(237) <= X"DEBB9EC5";
    crc32_lut_arr(0)(238) <= X"47B2CF7F";
    crc32_lut_arr(0)(239) <= X"30B5FFE9";
    crc32_lut_arr(0)(240) <= X"BDBDF21C";
    crc32_lut_arr(0)(241) <= X"CABAC28A";
    crc32_lut_arr(0)(242) <= X"53B39330";
    crc32_lut_arr(0)(243) <= X"24B4A3A6";
    crc32_lut_arr(0)(244) <= X"BAD03605";
    crc32_lut_arr(0)(245) <= X"CDD70693";
    crc32_lut_arr(0)(246) <= X"54DE5729";
    crc32_lut_arr(0)(247) <= X"23D967BF";
    crc32_lut_arr(0)(248) <= X"B3667A2E";
    crc32_lut_arr(0)(249) <= X"C4614AB8";
    crc32_lut_arr(0)(250) <= X"5D681B02";
    crc32_lut_arr(0)(251) <= X"2A6F2B94";
    crc32_lut_arr(0)(252) <= X"B40BBE37";
    crc32_lut_arr(0)(253) <= X"C30C8EA1";
    crc32_lut_arr(0)(254) <= X"5A05DF1B";
    crc32_lut_arr(0)(255) <= X"2D02EF8D";
    --------------------------------------------------------------------------------
    -- End of LUT Array:
    --------------------------------------------------------------------------------

end architecture behavioral;
--------------------------------------------------------------------------------
-- End of Autogenerated Code
--------------------------------------------------------------------------------
